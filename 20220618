# 문자열 자료형
# a='hello python'
#
# print(a.count('o'))#count(문자) 해당 문자의 개수를 구해주는 함수
# print(a.find('l'))#find('문자') 이 문자의 시작 인덱스 번호를 반환, 없는 문자를 찾을경우에는 -1을 변환한다.
# print(a.index('l'))#index('문자') 해당 문자의 시작 인덱스 번호를 반환, find함수와는 별개로 index함수는 없는 값을 넣으면 오류를 반환한다.
# print(','.join(a))#특정 문자를 인덱스 번호 사이사이에 넣어준다.
# print(a.replace('py','my'))#replace(old,new) old에 들어간 문자를 new자리에 들어간 문자로 대체한다.
# print(a.split())#split()은 해당 기준점으로 문자열을 나누어 준다.
# print(a.upper)#a를 대문자로 변환
# print(a.lower)#a를 소문자로 변환
# print(a.capitalize())#0번째 문자가 대문자로 변경된다.
# print(a.startswith('el'))#해당 문자로 시작하는 지를 물어본다. True/False 반환
# print(a.endswith('ton'))#해당 문자로 끝나는지를 물어본다. True/False 반환
# print(a.is~)#is로 시작하는 함수들을 물어보는 함수 =True/False 반환
# a.isalnum() = a라는 문자가 알파벳 또는 숫자인지를 물어본다.True/False 반환
# a = "hi~"
# print(a.isalpha())#a라는 문자가 알파벳인지를 물어본다.True/False 반환
# print(a.isdigit())#a라는 문자가 숫자로 이루어져 있는지 물어본다.True/False 반환
#
# a="....app.le...."
# print('ㅣ',a.lstrip('.'),'ㅣ',sep="")#a 문자열에서 왼쪽부터 연속되는 . 지우기
# print('ㅣ',a.strip('.'),'ㅣ',sep="") #a문자열에서 양쪽부터 연속되는 . 지우기
# print('ㅣ',a.rstrip('.'),'ㅣ',sep="")#a문자열에서 오른쪽부터 연속되는 . 지우기

#
#



# #리스트
# list_a=[1,2,3,[4,5,[6,7],8],9,10]
# print(list_a[3][0])
# print(len(list_a))
# print(a[:3])


# list_a=[1,2,3,4]
#
# list_a.insert(1,5)#첫번째 자리에다 자기가 놓고싶은 자리에 인덱스 번호를 쓰고 두번째 자리에다 무슨 숫자를 넣고 싶은지 쓰기
# print(list_a)
# list_a[2]=7
# #4라는 값을 삭제
# del list_a[3]
#
# list_b=['a','b','c','d']
#
# #리스트간의 덧셈
# print(list_a + list_b)
#리스트와 정수의 곱셈
#print(list_a * 3)

# a=[4,1,2,3]
# a.apppend(5)# = 해당 값을 리스트의 마지막 인덱스에 추가
# a.reserve()#reverse = 순서 반전(원본 데이터를 반전)
# print(list(reversed(a))) #복사본을 가지고 순서 반전후 리스트를 반환
# a.insert(0,7)#insert(위치, 값) = 해당 위치에 원하는 값을 삽입
# print(a.pop(0))#()안에 아무것도 넣지 않았을때에는 가장 마지막 인덱스에 위치한 값이 추출된다. ()안에는 인덱스 번호가 들어간다.

# print(a)
# print(a.count(3)) count(값) = 해당 값이 리스트에 몇개 존재하는지를 반환
# a.sort(reverse =True)#sort() 순서 정렬
# print(sorted(a,reverse=True))
# print(a)
# a.remobe(5)#remove(값) = 리스트에서 해당 값을 삭제
# b=[6,7,8,9]
# a.extend(b)#리스트의 확장()
# a.append(b)
# print(len(a))




#딕션어리          key-value
# d={'apple':'사과','banana':"바나나",3:"삼"}
# print(d["apple"],d["banana"],d[3]#key값을 이용해서 value값 뽑아내기
# print(d['사과'])#[]안에는 무조건 키값만 와야 한다. value값이 오더라도 인식하지 못한다.
# print(d['apple'])
# #딕셔너리에서의 수정 삭제 추가
# #수정
# d['apple'] = '복숭아' #[딕셔너리에 있는 key값] = 바꾸어줄 value값
# #삭제
# #del d['banana'] # [딕셔너리에 지워줄 key값] ==value값도 같이 없어진다.
# #추가
# d['orange'] = '오렌지' #[딕셔너리에 없는 key값] == '추가될 key값의 value값'


#bool boolean
# 자료형들의 참과 거짓 = 값이 있으면 참 없으면 거짓
# boolean(불 또는 불린) = 자료형의 참 거짓을 나타내는 함수 (True,False)
#
#
#
#
# a= 'hello'
# if a:
#     print('hello')
#     if a>0:
# else:
#     print('python')
#
# # 비교 연산자 <,>,<=, >=,==,!=
# # 논리 연산자 and or not
#
# if not 0:
#     print(1)




# 반복문
# while 문 - 조건을 만족하는 동안 반복 실행
#
# while True:#조건이 항상 참 == 무한 반복
#     if 조건:
#         break #반복문을 탈출할때 사용
#     if 조건:
#         continue # 밑의 실행문을 실행하지 않고 다음 반복으로 건너뜀
#
#
# num=10
# while True:
#     if num==0:
#         break
#     num-=1
#     if num %2 ==0:
#         continue
#     print(num)
#
#
# # for 문 - 몇 회 만큼 반복 실행 - 반복횟수를 알때
# # for 변수 in 연속된 자료형/range():
# #     실행문
# for i in range(10):     #range(10) = (0,1,2,3,4,5,6,7,8,9)=0부터n-1까지의 범위
#     print(i)
# for i in range(1,11):
#     if i % 2 == 0:
#         continue
#     if i == 7:
#         break
#     print(i)

# a=[1,2,3,4,5]
# a='hello python'
# for i in a:
#     print(i)










# 문제 설명
# 프로그래머스 모바일은 개인정보 보호를 위해 고지서를 보낼 때 고객들의 전화번호의 일부를 가립니다.
# 전화번호가 문자열 phone_number로 주어졌을 때, 전화번호의 뒷 4자리를 제외한
# 나머지 숫자를 전부 *으로 가린 문자열을 리턴하는 함수, solution을 완성해주세요.

#함수 포함X
# phone_number = "01033334444"
# length = len(phone_number)
# star = '*' * (length-4)
# result=star +phone_number[-4:]
# print(result)



#함수 포함
# def solution(phone_number):
#     star = '*' * (length - 4)
#     result = star + phone_number[-4:]
#     return result
#
# def solution(phone_number):
#     return '*'*(len(phone_number)-4) + phone_number[-4:]
#
# phone_number = "01033334444"
# print(solution(phone_number))



#집합
# s1 = set([1])
# s2 = set([1,2])
# s3 = set([3,4])
# #합집합 구하기
# print(s1 s2, s2 s3)
# #차집합 구하기
# print(s1-s2,s2-s3)
# #교집합 구하기
# print(s1 & s2, s2 & s3)
# a=[1,2,1,1,4,]




#함수
# def one_to_ten():
#     for i in range(1,11):
#         print(i,end = ' ')
#     print()
#
# def 함수명(매개변수):
#     실행문
#     return 결과값
# def print_hi():#입력값이 없는 함수
#     return "hi"
# print(return_hi())


def print_sum(a,b):
    print(a+b)

print(print_sum(5,6))

def sum(*args):
    for i in args:
        print(i)
sum(1,2,3,4,5,6,7,8,9)


#매개 변수의 초기값을 설정해줄 수 있다.
def say_myself(name, age,man = True):
    print("나의 이름은 %s 입니다."%name)
    print("나의 나이는 %d 입니다."% age)
    if man:
        print("남자입니다.")
    else:
        print("여자입니다.")


say_myself("박찬빈",29)




#함수의 결과 값(반환값)의 개수는 무조건 1개이다.
# def sum_mul(a,b):
#     return a+b, a*b, a-b, a// b, a%b
# print(sum_mul(3,4))



a=1
def vartest():
    global a #global a = 전역변수 a
    a=2    #함수 내에서 사용된 변수 = 지역변수
    return a
vartest()
print(a)


def solution(s):
    d={"zero":'0',"one":'1',"two":'2',"three":'3','four':'4','five':5,'six':'6',"seven":'7',"eight":'8','nine':'9'}
    for key,value in d.items():
        if key in s:
            s=s.replace(key,value)
    return int(s)


a=''


new_id="...!@BaT#*..y.abcdefghijklm"
def solution(new_id):
    new_id.lower
    new_id.remove('!','@','*')
    new_id.replace("..."and'..','.')
    if new_id[0]=='.':
        del new_id[0]
    else:
        new_id.remove[16:]
        print(new_id)
